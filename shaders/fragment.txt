#version 330 core

in vec2 TexCoord;
in vec3 fragPos;
in vec3 fragNormal;

out vec4 Colour;

struct PointLight{
	bool isOn;

	vec3 position;
    float strength;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct DirectionLight{
    vec3 direction;
    vec3 colour;
    vec3 ambient;
};

struct Material {
    vec3 ambient;
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
    bool emissive;
}; 

#define MAX_POINT_LIGHTS 8
uniform PointLight pointLights[MAX_POINT_LIGHTS];

uniform Material material;

uniform vec3 viewPos;

uniform DirectionLight sun;

vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

vec3 CalculateDirectionLight(DirectionLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
    // fog calculation
    vec3 fogColour = vec3(0.55,0.25,0.14);
    float fogAmount = pow(gl_FragCoord.z,32);

    if(!material.emissive){
	    vec3 viewDir = normalize(viewPos - fragPos);
	    vec3 lightOutput = vec3(0.0);

	    for(int i = 0; i < MAX_POINT_LIGHTS; i++){
		    if(pointLights[i].isOn){
			    lightOutput += CalculatePointLight(pointLights[i], fragNormal, fragPos, viewDir);
		    }
        }

        lightOutput += CalculateDirectionLight(sun, fragNormal, fragPos, viewDir);

        Colour = vec4(mix(lightOutput,fogColour,fogAmount), 1.0);
    }
    else{
        Colour = texture(material.diffuse, TexCoord);
    }
}

vec3 CalculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoord))*light.strength*attenuation;
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoord));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));
    diffuse  *= light.strength*attenuation;
    specular *= light.strength*attenuation;
    return (ambient + diffuse + specular);
}

vec3 CalculateDirectionLight(DirectionLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = -light.direction;
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(light.direction, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);  
    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoord));
    vec3 diffuse  = light.colour  * diff * vec3(texture(material.diffuse, TexCoord));
    vec3 specular = light.colour * spec * vec3(texture(material.specular, TexCoord));
    //return (ambient + diffuse + specular);
    return (diffuse + specular);
}